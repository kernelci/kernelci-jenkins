#!/usr/bin/env groovy

/*
  Copyright (C) 2020-2022 Collabora Limited
  Author: Lakshmipathi Ganapathi <lakshmipathi.ganapathi@collabora.com>
  Author: Guillaume Tucker <guillaume.tucker@collabora.com>
  Author: Denys Fedoryshchenko <denys.f@collabora.com>

  This module is free software; you can redistribute it and/or modify it under
  the terms of the GNU Lesser General Public License as published by the Free
  Software Foundation; either version 2.1 of the License, or (at your option)
  any later version.

  This library is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
  details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/

/* ----------------------------------------------------------------------------
 * Jenkins parameters

KCI_CORE_URL (https://github.com/kernelci/kernelci-core.git)
  URL of the kernelci-core repository
KCI_CORE_BRANCH (master)
  Name of the branch to use in the kernelci-core repository
KCI_API_URL (https://api.kernelci.org)
  URL of the KernelCI backend API
KCI_API_TOKEN_ID
  Identifier of the KernelCI backend API token stored in Jenkins
DOCKER_BASE
  Dockerhub base address used for the build images
ROOTFS_CONFIG
  Configuration name to build RootFS images
ROOTFS_ARCH
  RootFS image architecture
PIPELINE_VERSION
  Unique string identifier for the series of rootfs build jobs
*/


@Library('kernelci') _
import org.kernelci.util.Job

def build(config, arch, pipeline_version, kci_core, rootfs_type) {
    dir(kci_core) {
        sh(script: """\
./kci_rootfs \
build \
--rootfs-config ${config} \
--arch ${arch} \
--data-path config/rootfs/${rootfs_type} \
--output ${pipeline_version}
""")
    }
}

def upload(config, pipeline_version, kci_core, rootfs_type, arch) {
    rootfs_upload_path = "images/rootfs/debian/${config}/${pipeline_version}"
    print("\n Uploading rootfs_type: ${rootfs_type}")

    if (rootfs_type == "buildroot") {
       rootfs_upload_path = "images/rootfs/buildroot/${config}/${pipeline_version}"
    }

    dir(kci_core) {
        withCredentials([string(credentialsId: params.KCI_API_TOKEN_ID,
                                variable: 'API_TOKEN')]) {
            sh(script: """\
./kci_rootfs \
upload \
--db-token ${API_TOKEN} \
--api ${params.KCI_API_URL} \
--rootfs-dir ${pipeline_version}/_install_/${config} \
--upload-path ${rootfs_upload_path}
""")
        }
    }
}

node("debos && docker") {
    def j = new Job()
    def kci_core = "${env.WORKSPACE}/kernelci-core"
    def config = "${params.ROOTFS_CONFIG}"
    def arch = "${params.ROOTFS_ARCH}"
    def pipeline_version =  "${params.PIPELINE_VERSION}"
    def rootfs_type = "${params.ROOTFS_TYPE}"
    def docker_image = "${params.DOCKER_BASE}${rootfs_type}:kernelci"

    print("""\
    Config:    ${config}
    CPU arch:  ${arch}
    Pipeline:  ${pipeline_version}
    Docker:    ${docker_image}""")

    if (!config || !arch || !pipeline_version) {
        print("Invalid parameters")
        currentBuild.result = 'ABORTED'
        return
    }

    j.dockerPullWithRetry(docker_image).inside() {
        j.cloneKciCore(kci_core, params.KCI_CORE_URL, params.KCI_CORE_BRANCH)
    }

    j.dockerPullWithRetry(docker_image).
        inside(" --privileged --device /dev/kvm -v /dev:/dev") {

        stage("Build") {
            timeout(time: 8, unit: 'HOURS') {
	        build(config, arch, pipeline_version, kci_core, rootfs_type)
            }
        }

        stage("Upload") {
            timeout(time: 30, unit: 'MINUTES') {
                upload(config, pipeline_version, kci_core, rootfs_type, arch);
            }
        }
    }
}
