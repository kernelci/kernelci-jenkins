#!/usr/bin/env groovy

/*
  Copyright (C) 2019-2021 Collabora Limited
  Author: Guillaume Tucker <guillaume.tucker@collabora.com>

  This module is free software; you can redistribute it and/or modify it under
  the terms of the GNU Lesser General Public License as published by the Free
  Software Foundation; either version 2.1 of the License, or (at your option)
  any later version.

  This library is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
  details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/

/* ----------------------------------------------------------------------------
 * Jenkins parameters

LABS
  Name of the labs where to submit tests
TRIGGER_JOB_NAME
  Name of the parent trigger job
TRIGGER_JOB_NUMBER
  Number of the parent trigger job
BUILD_JOB_NAME
  Name of the job that built the kernel
BUILD_JOB_NUMBER
  Number of the job that built the kernel
KCI_STORAGE_URL (https://storage.kernelci.org/)
  URL of the KernelCI storage server
DOCKER_BASE (kernelci/)
  Dockerhub base address used for the build images
CALLBACK_ID (kernel-ci-callback)
  Identifier of the callback to look up an authentication token
CALLBACK_URL (https://api.kernelci.org)
  Base URL where to send the callbacks
*/

@Library('kernelci') _
import org.kernelci.util.Job

def getArtifacts(artifacts)
{
    dir(artifacts) {
        copyArtifacts(
            projectName: params.BUILD_JOB_NAME,
            selector: specific("${params.BUILD_JOB_NUMBER}")
        )

        if (params.TRIGGER_JOB_NAME) {
            copyArtifacts(
                projectName: params.TRIGGER_JOB_NAME,
                selector: specific("${params.TRIGGER_JOB_NUMBER}")
            )
        }
    }
}

def generateJobs(lab, artifacts, jobs_dir)
{
    def token = "${lab}-lava-api"

    withCredentials([string(credentialsId: token, variable: 'SECRET')]) {
        sh(script: """\
kci_test \
generate \
--install-path=${artifacts} \
--runtime-json=${artifacts}/${lab}.json \
--storage=${params.KCI_STORAGE_URL} \
--runtime-config=${lab} \
--user=kernel-ci \
--runtime-token=${SECRET} \
--output=${jobs_dir} \
--callback-id=${params.CALLBACK_ID} \
--callback-url=${params.CALLBACK_URL} \
""")
    }
}

def submitJobs(lab, jobs_dir)
{
    def token = "${lab}-lava-api"

    withCredentials([string(credentialsId: token, variable: 'SECRET')]) {
        sh(script: """\
kci_test \
submit \
--runtime-config=${lab} \
--user=kernel-ci \
--runtime-token=${SECRET} \
--jobs=${jobs_dir}/* \
""")
    }
}

node("docker && test-runner") {
    def j = new Job()
    def jobs_dir = "${env.WORKSPACE}/jobs"
    def artifacts = "${env.WORKSPACE}/artifacts"
    def docker_image = "${params.DOCKER_BASE}kernelci"
    def labs = params.LABS.tokenize(' ')
    def labs_submit = []

    print("""\
    Labs:      ${params.LABS}
    Container: ${docker_image}""")

    j.dockerPullWithRetry(docker_image).inside('--init') {
        stage("Init") {
            sh(script: "rm -rf ${artifacts}")
            sh(script: "rm -rf ${jobs_dir}")

            timeout(time: 15, unit: 'MINUTES') {
                getArtifacts(artifacts)
            }

            print("Artifacts:")
            sh(script: "ls -l ${artifacts}")

            print("Build meta-data:")
            sh(script: "cat ${artifacts}/bmeta.json")
        }

        stage("Generate") {
            for (lab in labs) {
                def lab_dir = "${jobs_dir}/${lab}"
                generateJobs(lab, artifacts, lab_dir)
                labs_submit.add(lab)
            }
        }

        stage("Submit") {
            def steps = [:]
            def i = 0

            for (lab in labs_submit) {
                def lab_name = "${lab}"
                def lab_dir = "${jobs_dir}/${lab}"
                def step_name = "${i} ${lab}"

                print(step_name)

                steps[step_name] = {
                    submitJobs(lab_name, lab_dir)
                }

                i += 1
            }

            parallel(steps)
        }
    }
}
