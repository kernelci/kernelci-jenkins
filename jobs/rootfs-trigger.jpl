#!/usr/bin/env groovy

/*
  Copyright (C) 2020-2022 Collabora Limited
  Author: Lakshmipathi Ganapathi <lakshmipathi.ganapathi@collabora.com>
  Author: Guillaume Tucker <guillaume.tucker@collabora.com>

  This module is free software; you can redistribute it and/or modify it under
  the terms of the GNU Lesser General Public License as published by the Free
  Software Foundation; either version 2.1 of the License, or (at your option)
  any later version.

  This library is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
  details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/

/* ----------------------------------------------------------------------------
 * Jenkins parameters

KCI_CORE_URL (https://github.com/kernelci/kernelci-core.git)
  URL of the kernelci-core repository
KCI_CORE_BRANCH (master)
  Name of the branch to use in the kernelci-core repository
DOCKER_BASE
  Dockerhub base address used for the build images
ROOTFS_CONFIG
  Set this to limit the rootfs builds to only one configuration
  Cannot be used with ROOTFS_TYPE
ROOTFS_ARCH
  Set this to limit the rootfs builds to only one architecture
ROOTFS_TYPE
  Set this to limit the rootfs builds only to specific type. 
  Cannot be used with ROOTFS_CONFIG
PIPELINE_VERSION
  Unique string identifier for the series of rootfs build jobs
*/

@Library('kernelci') _
import org.kernelci.util.Job

def listVariants(kci_core, config_list, rootfs_config, rootfs_arch_list, rootfs_type_list) {
    def cli_opts = ' '

    if (rootfs_config) {

        cli_opts += " --rootfs-config ${rootfs_config}"
    }

    for (String rootfs_arch: rootfs_arch_list) {
        cli_opts += " --arch ${rootfs_arch}"
    }

    for (String rootfs_type: rootfs_type_list) {
        cli_opts += " --rootfs-type ${rootfs_type}"
    }

    dir(kci_core) {
        def rootfs_config_list_raw = sh(script: """\
./kci_rootfs \
list_variants \
${cli_opts}
""", returnStdout: true).trim()

        def rootfs_config_list =  rootfs_config_list_raw.tokenize('\n')

        for (String rootfs_config_raw: rootfs_config_list) {
            def data = rootfs_config_raw.tokenize(' ')
            def config = data[0]
            def arch = data[1]
            def type = data[2]
            config_list.add([config, arch, type])
        }
    }
}


def buildRootfsStep(job, config ,arch, rootfs_type) {
    def pipeline_version = params.PIPELINE_VERSION;

    if (!pipeline_version) {
        pipeline_version = VersionNumber(
            versionNumberString:
            '${BUILD_DATE_FORMATTED,"yyyyMMdd"}.${BUILDS_TODAY_Z}')
    }

    def str_params = [
        'ROOTFS_CONFIG': config,
        'ROOTFS_ARCH': arch,
        'ROOTFS_TYPE' : rootfs_type,
        'PIPELINE_VERSION':pipeline_version,
        'KCI_CORE_URL': "${params.KCI_CORE_URL}",
        'KCI_CORE_BRANCH': "${params.KCI_CORE_BRANCH}",
    ]
    def job_params = []

    def j = new Job()
    j.addStrParams(job_params, str_params)

    return {
        def res = build(job: job, parameters: job_params, propagate: false)
    }
}


node("docker && rootfs-trigger") {
    def j = new Job()
    def kci_core = "${env.WORKSPACE}/kernelci-core"
    def docker_image = "${params.DOCKER_BASE}kernelci"
    def configs = []

    print("""\
    Config:      ${params.ROOTFS_CONFIG}
    CPU arch:    ${params.ROOTFS_ARCH}
    Rootfs type: ${params.ROOTFS_TYPE}
    Container:   ${docker_image}""")

    j.dockerPullWithRetry(docker_image).inside('--init') {

        stage("Init") {
            timeout(time: 15, unit: 'MINUTES') {
                j.cloneKciCore(
                    kci_core, params.KCI_CORE_URL, params.KCI_CORE_BRANCH)
            }
        }

        stage("Configs") {
            def rootfs_type_list = params.ROOTFS_TYPE.tokenize(' ')
            def rootfs_arch_list = params.ROOTFS_ARCH.tokenize(' ')
            listVariants(kci_core, configs, params.ROOTFS_CONFIG,
                         rootfs_arch_list, rootfs_type_list)
        }

        stage("Build") {
            def builds = [:]
            def i = 0

            for (item in configs) {
                def config_name = item[0]
                def arch = item[1]
                def rootfs_type = item[2]

                def step_name = "${i} ${config_name} ${arch} ${rootfs_type}"
                print(step_name)

                builds[step_name] = buildRootfsStep(
                    "rootfs-builder", config_name, arch, rootfs_type)

                i += 1
            }

            parallel(builds)
        }
    }
}
