#!/usr/bin/env groovy

/*
  Copyright (C) 2018-2021 Collabora Limited
  Author: Guillaume Tucker <guillaume.tucker@collabora.com>

  This module is free software; you can redistribute it and/or modify it under
  the terms of the GNU Lesser General Public License as published by the Free
  Software Foundation; either version 2.1 of the License, or (at your option)
  any later version.

  This library is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
  details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/

/* ----------------------------------------------------------------------------
 * Jenkins parameters

ARCH
  CPU architecture as understood by the Linux kernel build system
DEFCONFIG
  Linux kernel defconfig to build
SRC_TARBALL
  URL of the kernel source tarball
BUILD_CONFIG
  Name of the build configuration
GIT_DESCRIBE
  Output of 'git describe' at the revision of the snapshot
GIT_DESCRIBE_VERBOSE
  Verbose output of 'git describe' at the revision of the snapshot
COMMIT_ID
  Git commit SHA1 at the revision of the snapshot
BUILD_ENVIRONMENT
  Name of the build environment
NODE_LABEL
  Label to use to choose a node on which to run this job
PUBLISH (boolean)
  Publish build results via the KernelCI backend API
EMAIL (boolean)
  Send build results via email
KCI_DB_CONFIG (kernelci.org)
  Name of the --db-config value to use with kci_data
KCI_API_URL (https://api.kernelci.org)
  URL of the KernelCI backend API
KCI_API_TOKEN_ID
  Identifier of the KernelCI backend API token stored in Jenkins
KCI_STORAGE_URL (https://storage.kernelci.org/)
  URL of the KernelCI storage server
DOCKER_BASE (kernelci/)
  Dockerhub base address used for the build images
PARALLEL_BUILDS
  Number of kernel builds to run in parallel

 */


@Library('kernelci') _
import org.kernelci.util.Job

/* K8S build */
node("docker" && params.NODE_LABEL) {
    def j = new Job()
    def k8s_context = "${env.K8S_CONTEXT}"
    def docker_image = null

    print("""\
    Config:    ${params.BUILD_CONFIG}
    CPU arch:  ${params.ARCH}
    Describe:  ${params.GIT_DESCRIBE}
    Revision:  ${params.COMMIT_ID}
    Defconfig: ${params.DEFCONFIG}
    Compiler:  ${params.BUILD_ENVIRONMENT}
    K8S ctx:   ${k8s_context}""")

    docker_image = "${params.DOCKER_BASE}k8s:cros-kernelci"
    j.dockerPullWithRetry(docker_image).inside("-v $HOME/.kube:/.kube -v $HOME/.config/gcloud:/.config/gcloud -v $HOME/.azure:/.azure") {
        build_env_docker_image = j.dockerImageName(
            params.BUILD_ENVIRONMENT, params.ARCH
        )

        stage("Init") {
            /* Remove any leftover temporary files */
            sh(script: "rm -rf *")
            /* list clusters to init/refresh auth credentials */
            print("K8S: Google Cloud clusters available:")
            sh(script: "gcloud container clusters list || exit 0")
            print("K8S: Azure clusters available:")
            sh(script: "az aks list -o table || exit 0")
            print("K8S context: ${k8s_context}.  Current nodes:")
            sh(script: "kubectl --context ${k8s_context} get nodes")
        }

        stage("Build") {
            timeout(time: 45, unit: 'MINUTES') {
                def k8s_job = sh(script: """\
DOCKER_IMAGE=${build_env_docker_image} \
/etc/kernelci/k8s/gen.py""", returnStdout: true).trim()

                /* submit */
                sh(script: "kubectl --context ${k8s_context} apply -f ${k8s_job}.yaml")
                sh(script: "kubectl --context ${k8s_context} describe -f ${k8s_job}.yaml || exit 0")

                /* Wait for pod to finish (will also dump logs and remove job) */
                sh(script: """
/etc/kernelci/k8s/wait.py \
--context ${k8s_context} \
--job-name ${k8s_job} \
| tee ${k8s_job}.log""")

                /* Find upload path */
                upload_path_line = sh(script: "grep \"^Upload path:\" ${k8s_job}.log",
                                      returnStdout: true).trim().tokenize(':')
                if (upload_path_line.size() > 0) {
                    upload_path = upload_path_line[1].trim()
                    print("Upload path: ${upload_path}")

                    sh(script: "wget -q ${KCI_STORAGE_URL}/${upload_path}/bmeta.json")
                    sh(script: "wget -q ${KCI_STORAGE_URL}/${upload_path}/steps.json")
                    sh(script: "wget -q ${KCI_STORAGE_URL}/${upload_path}/artifacts.json")
                    archiveArtifacts("*.json")
                }
            }
        }
    }
}
