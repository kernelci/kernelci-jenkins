#!/usr/bin/env groovy

/*
  Copyright (C) 2018 Collabora Limited
  Author: Guillaume Tucker <guillaume.tucker@collabora.com>

  This module is free software; you can redistribute it and/or modify it under
  the terms of the GNU Lesser General Public License as published by the Free
  Software Foundation; either version 2.1 of the License, or (at your option)
  any later version.

  This library is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
  details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/

/* ----------------------------------------------------------------------------
 * Jenkins parameters

ARCH
  CPU architecture as understood by the Linux kernel build system
DEFCONFIG
  Linux kernel defconfig to build
SRC_TARBALL
  URL of the kernel source tarball
BUILD_CONFIG
  Name of the build configuration
GIT_DESCRIBE
  Output of 'git describe' at the revision of the snapshot
GIT_DESCRIBE_VERBOSE
  Verbose output of 'git describe' at the revision of the snapshot
COMMIT_ID
  Git commit SHA1 at the revision of the snapshot
BUILD_ENVIRONMENT
  Name of the build environment
NODE_LABEL
  Label to use to choose a node on which to run this job
PUBLISH (boolean)
  Publish build results via the KernelCI backend API
EMAIL (boolean)
  Send build results via email
KCI_API_URL (https://api.kernelci.org)
  URL of the KernelCI backend API
KCI_TOKEN_ID
  Identifier of the KernelCI backend API token stored in Jenkins
KCI_CORE_URL (https://github.com/kernelci/kernelci-core.git)
  URL of the kernelci-core repository
KCI_CORE_BRANCH (master)
  Name of the branch to use in the kernelci-core repository
DOCKER_BASE (kernelci/)
  Dockerhub base address used for the build images
PARALLEL_BUILDS
  Number of kernel builds to run in parallel

 */


@Library('kernelci') _
import org.kernelci.util.Job

/* K8S build */
node("docker" && "k8s" && params.NODE_LABEL) {
    def j = new Job()
    def kci_core = "${env.WORKSPACE}/kernelci-core"
    def k8s_context = "${env.K8S_CONTEXT}"
    def docker_image = null

        print("""\
    Config:    ${params.BUILD_CONFIG}
    CPU arch:  ${params.ARCH}
    Describe:  ${params.GIT_DESCRIBE}
    Revision:  ${params.COMMIT_ID}
    Defconfig: ${params.DEFCONFIG}
    Compiler:  ${params.BUILD_ENVIRONMENT}
    K8S ctx:   ${k8s_context}""")

    docker_image = "${params.DOCKER_BASE}build-k8s"
    j.dockerPullWithRetry(docker_image).inside("-v $HOME/.kube:/.kube -v $HOME/.config/gcloud:/.config/gcloud -v $HOME/.azure:/.azure") {
        j.cloneKciCore(kci_core, params.KCI_CORE_URL, params.KCI_CORE_BRANCH)
        build_env_docker_image = j.dockerImageName(
            kci_core, params.BUILD_ENVIRONMENT, params.ARCH)

	dir(kci_core) {
	    stage("Init") {
		/* list clusters to init/refresh auth credentials */
		print("K8S: Google Cloud clusters available:")
		sh(script: "gcloud container clusters list || exit 0")
		print("K8S: Azure clusters available:")
		sh(script: "az aks list -o table || exit 0")

		print("K8S context: ${k8s_context}.  Current nodes:")
		sh(script: "kubectl --context ${k8s_context} get nodes")
	    }

	    stage("Build") {
		timeout(time: 45, unit: 'MINUTES') {
		    def k8s_job = sh(script:"DOCKER_IMAGE=${build_env_docker_image} ./templates/k8s/gen.py", 
				     returnStdout: true).trim()

		    /* submit */
		    sh(script: "kubectl --context ${k8s_context} apply -f ${k8s_job}.yaml")
		    sh(script: "kubectl --context ${k8s_context} describe -f ${k8s_job}.yaml || exit 0")

		    /* Wait for pod to finish (will also dump logs and remove job) */
		    sh(script: "./templates/k8s/wait.py --context ${k8s_context} --job-name ${k8s_job} | tee ${k8s_job}.log")

		    /* Find upload path */
		    upload_path_line = sh(script: "grep \"^Upload path:\" ${k8s_job}.log",
					  returnStdout: true).trim().tokenize(':')
		    if (upload_path_line.size() > 0) {
			upload_path = upload_path_line[1].trim()
			print("Upload path: ${upload_path}")

			sh(script: "wget -q http://storage.staging.kernelci.org/${upload_path}/bmeta.json")
			sh(script: "wget -q http://storage.staging.kernelci.org/${upload_path}/dtbs.json")
			archiveArtifacts("*.json")
		    }
		}
	    }
	}
    }
}
