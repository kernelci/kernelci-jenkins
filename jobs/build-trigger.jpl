#!/usr/bin/env groovy

/*
  Copyright (C) 2018-2022 Collabora Limited
  Author: Guillaume Tucker <guillaume.tucker@collabora.com>

  This module is free software; you can redistribute it and/or modify it under
  the terms of the GNU Lesser General Public License as published by the Free
  Software Foundation; either version 2.1 of the License, or (at your option)
  any later version.

  This library is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
  details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/

/* ----------------------------------------------------------------------------
 * Jenkins parameters

BUILD_CONFIG
  Name of the build configuration
COMMIT_ID
  Git commit SHA1 at the revision of the snapshot
PUBLISH (boolean)
  Publish build results via the KernelCI backend API
EMAIL (boolean)
  Send build results via email
LABS_WHITELIST
  List of labs to include in the tests, all labs will be tested by default.
KCI_API_URL (https://api.kernelci.org)
  URL of the KernelCI backend API
KCI_API_TOKEN_ID
  Identifier of the KernelCI backend API token stored in Jenkins
KCI_STORAGE_CONFIG (storage.kernelci.org)
  Name of the KernelCI storage configuration
DOCKER_BASE (kernelci/)
  Dockerhub base address used for the build images
ALLOW_REBUILD (false)
  Allow building the same revision again.
*/

@Library('kernelci') _
import org.kernelci.util.Job

def updateRepo(config, mirror, kdir, opts) {
    sh(script: """\
kci_build \
update_mirror \
--build-config=${config} \
--mirror=${mirror} \
""")

    while (true) {
        try {
            sh(script: """\
kci_build \
update_repo \
--build-config=${config} \
--kdir=${kdir} \
--mirror=${mirror} \
""")
            break
        } catch (error) {
            print("Failed to update repo: ${error}")
            print("Removing clone and retrying")
            sh(script: "rm -rf ${kdir}")
            sleep 1
        }
    }

    def describe_raw = sh(script: """\
kci_build \
describe \
--build-config=${config} \
--kdir=${kdir} \
""", returnStdout: true).trim()
    def describe_list = describe_raw.tokenize('\n')
    opts['commit'] = describe_list[0]
    opts['describe'] = describe_list[1]
    opts['describe_verbose'] = describe_list[2]
}

def pushTarball(config, kdir, opts) {
    withCredentials([string(credentialsId: params.KCI_API_TOKEN_ID,
                            variable: 'SECRET')]) {
        opts['tarball_url'] = sh(script: """\
kci_build \
push_tarball \
--build-config=${config} \
--kdir=${kdir} \
--storage-config=${params.KCI_STORAGE_CONFIG} \
--api=${params.KCI_API_URL} \
--db-token=${SECRET} \
""", returnStdout: true).trim()
    }
}

def listConfigs(config, kdir, config_list) {
    sh(script: """\
kci_build \
generate_fragments \
--build-config=${config} \
--kdir=${kdir} \
""")

    def kernel_config_list_raw = sh(script: """\
kci_build \
list_kernel_configs \
--build-config=${config} \
--kdir=${kdir} \
""", returnStdout: true).trim()
    def kernel_config_list = kernel_config_list_raw.tokenize('\n')

    for (String kernel_config_raw: kernel_config_list) {
        def data = kernel_config_raw.tokenize(' ')
        def arch = data[0]
        def defconfig = data[1]
        def build_env = data[2]
        config_list.add([arch, defconfig, build_env])
    }
}

def listArchitectures(config) {
    def arch_list = []

    def raw_variants = sh(
        script: """\
kci_build \
list_variants \
--build-config=${config} \
""", returnStdout: true).trim()
    def variants = raw_variants.tokenize('\n')

    for (String variant: variants) {
        def raw_variant_arch_list = sh(
            script: """\
kci_build \
arch_list \
--build-config=${config} \
--variant=${variant} \
""", returnStdout: true).trim()
        def variant_arch_list = raw_variant_arch_list.tokenize('\n')

        for (String arch: variant_arch_list)
            if (!arch_list.contains(arch))
                arch_list.add(arch)
    }

    return arch_list
}

def addBuildOpts(config, opts) {
    opts['config'] = config

    def opts_raw = sh(
        script: """\
kci_build \
tree_branch \
--build-config=${config} \
""", returnStdout: true).trim()
    def opt_list = opts_raw.tokenize('\n')
    opts['tree'] = opt_list[0]
    opts['git_url'] = opt_list[1]
    opts['branch'] = opt_list[2]
}

def getLabsWithTests(build_job_name, number, labs) {
    def artifacts = "${env.WORKSPACE}/artifacts-${build_job_name}-${number}"
    def lab_list = []

    dir(artifacts) {
        copyArtifacts(
            projectName: build_job_name,
            selector: specific("${number}")
        )
    }

    def labs_info = "${env.WORKSPACE}/labs"

    for (lab in labs) {
        def lab_json = "${labs_info}/${lab}.json"

        def raw_jobs = sh(script: """\
#!/bin/sh -e
kci_test \
list_jobs \
--runtime-config=${lab} \
--runtime-json=${lab_json} \
--install-path=${artifacts} \
""", returnStdout: true).trim()

        if (raw_jobs)
            lab_list.push(lab)
    }

    sh(script: "rm -rf ${artifacts}")

    return lab_list
}

def scheduleTests(build_job_name, build_job_number, labs) {
    def labs_str = ""
    for (lab in labs)
        labs_str += "${lab} "

    def str_params = [
        'LABS': labs_str.trim(),
        'TRIGGER_JOB_NAME': env.JOB_NAME,
        'TRIGGER_JOB_NUMBER': env.BUILD_NUMBER,
        'BUILD_JOB_NAME': build_job_name,
        'BUILD_JOB_NUMBER': "${build_job_number}",
    ]
    def params = []

    def j = new Job()
    j.addStrParams(params, str_params)
    build(job: 'test-runner', parameters: params, propagate: false)
}

def buildKernelStep(job, arch, defconfig, build_env, opts, labs) {
    def node_label = "k8s"
    def parallel_builds = "4"

    if (defconfig.matches(".*allmodconfig.*") || defconfig.matches("^gki_defconfig.*")) {
        node_label = "k8s-big"
        parallel_builds = ""
    } else if (defconfig.matches("^defconfig.*") && arch == "arm64") {
        node_label = "k8s-medium"
        parallel_builds = ""
    } else if (defconfig.matches(".*kselftest.*")) {
        node_label = "k8s-medium"
        parallel_builds = ""
    }

    def str_params = [
        'ARCH': arch,
        'DEFCONFIG': defconfig,
        'GIT_DESCRIBE': opts['describe'],
        'GIT_DESCRIBE_VERBOSE': opts['describe_verbose'],
        'COMMIT_ID': opts['commit'],
        'SRC_TARBALL': opts['tarball_url'],
        'BUILD_CONFIG': opts['config'],
        'BUILD_ENVIRONMENT': build_env,
        'NODE_LABEL': node_label,
        'PARALLEL_BUILDS': parallel_builds,
        'KCI_API_URL': "${params.KCI_API_URL}",
        'KCI_API_TOKEN_ID': "${params.KCI_API_TOKEN_ID}",
        'KCI_STORAGE_CONFIG': "${params.KCI_STORAGE_CONFIG}",
        'DOCKER_BASE': "${params.DOCKER_BASE}",
    ]
    def job_params = []

    def j = new Job()
    j.addStrParams(job_params, str_params)

    return {
        def res = build(job: job, parameters: job_params, propagate: false)
        print("${res.number}: ${arch} ${defconfig} ${build_env} ${res.result}")
        if (res.result == "SUCCESS") {
            def test_labs = getLabsWithTests(job, res.number, labs)
            if (test_labs) {
                scheduleTests(job, res.number, test_labs)
            }
        }
    }
}

def buildsComplete(job, opts) {
    def str_params = [
        'TREE_NAME': opts['tree'],
        'GIT_DESCRIBE': opts['describe'],
        'BRANCH': opts['branch'],
    ]
    def bool_params = [
        'EMAIL': params.EMAIL,
        'PUBLISH': params.PUBLISH,
    ]
    def job_params = []

    def j = new Job()
    j.addStrParams(job_params, str_params)
    j.addBoolParams(job_params, bool_params)
    build(job: job, parameters: job_params)
}

node("docker && build-trigger") {
    def j = new Job()
    def kdir = "${env.WORKSPACE}/configs/${params.BUILD_CONFIG}"
    def mirror = "${env.WORKSPACE}/linux.git"
    def labs_info = "${env.WORKSPACE}/labs"
    def docker_image = "${params.DOCKER_BASE}kernelci"
    def opts = [:]
    def configs = []
    def buildStatus = null

    print("""\
    Config:    ${params.BUILD_CONFIG}
    Commit:    ${params.COMMIT_ID}
    Container: ${docker_image}""")

    j.dockerPullWithRetry(docker_image).inside('--init') {
        def labs = []

        stage("Labs") {
            sh(script: "rm -rf ${labs_info}; mkdir -p ${labs_info}")

            def raw_lab_names = sh(
                script: "kci_test list_labs", returnStdout: true).trim()
            def all_lab_names = raw_lab_names.tokenize('\n')
            def labs_list = []

            if (params.LABS_WHITELIST) {
                def whitelist = params.LABS_WHITELIST.tokenize(' ')

                for (lab in all_lab_names)
                    if (whitelist.contains(lab))
                        labs_list.add(lab)
            } else {
                labs_list = all_lab_names
            }

            for (lab in labs_list) {
                def lab_json = "${labs_info}/${lab}.json"
                def token = "${lab}-lava-api"
                def retry = 3
                while (retry--) {
                    try {
                        withCredentials([string(credentialsId: token,
                                                variable: 'SECRET')]) {
                            sh(script: """\
kci_test \
get_lab_info \
--runtime-config=${lab} \
--runtime-json=${lab_json} \
--user=kernel-ci \
--runtime-token=${SECRET} \
""")
                        }
                        labs.add(lab)
                        retry = 0
                    } catch (error) {
                        print("Error with ${lab}: ${error}")
                    }
                }
            }
        }

        dir(labs_info) {
            archiveArtifacts("*.json")
        }

        stage("Repo") {
            updateRepo(params.BUILD_CONFIG, mirror, kdir, opts)
        }

        if (params.ALLOW_REBUILD != true) {
            if (opts['commit'] != params.COMMIT_ID) {
                print("Commit mismatch: ${params.COMMIT_ID} ${opts['commit']}")
                currentBuild.result = 'ABORTED'
                return
            }
        }

        stage("Tarball") {
            pushTarball(params.BUILD_CONFIG, kdir, opts)
        }

        stage("Configs") {
            listConfigs(params.BUILD_CONFIG, kdir, configs)
        }

        stage("Build") {
            def builds = [:]
            def i = 0

            addBuildOpts(params.BUILD_CONFIG, opts)

            for (x in configs) {
                def arch = x[0]
                def defconfig = x[1]
                def build_env = x[2]

                def step_name = "${i} ${arch} ${defconfig} ${build_env}"
                print(step_name)

                builds[step_name] = buildKernelStep(
                    "kernel-build", arch, defconfig, build_env, opts, labs)

                i += 1
            }

            try {
                parallel(builds)
            } catch (err) {
                print("Builds failed: ${err}")
                buildStatus = "FAILURE"
            }
        }

        stage("Complete") {
            buildsComplete("kernel-arch-complete", opts)
        }

        if (buildStatus)
            currentBuild.result = buildStatus;
    }
}
